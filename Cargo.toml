[workspace]
resolver = "2"

members = [
	"bin/katana",
	"crates/chain-spec",
	"crates/cli",
	"crates/controller",
	"crates/core",
	"crates/executor",
	"crates/feeder-gateway",
	"crates/grpc",
	"crates/log",
	"crates/messaging",
	"crates/metrics",
	"crates/node",
	"crates/node-bindings",
	"crates/oracle/gas",
	"crates/pool",
	"crates/primitives",
	"crates/rpc/rpc",
	"crates/rpc/rpc-api",
	"crates/rpc/rpc-types",
	"crates/rpc/rpc-types-builder",
	"crates/runner",
	"crates/runner/macro",
	"crates/storage/codecs",
	"crates/storage/codecs/derive",
	"crates/storage/db",
	"crates/storage/fork",
	"crates/storage/provider",
	"crates/sync/pipeline",
	"crates/sync/stage",
	"crates/tasks",
	"crates/trie",
	"crates/utils",
	"tests/db-compat",
	"tests/reverse-proxy",
	"tests/snos",
]

[workspace.package]
edition = "2021"
license = "Apache-2.0"
license-file = "LICENSE"
repository = "https://github.com/dojoengine/katana/"
version = "1.6.0"

[profile.performance]
codegen-units = 1
incremental = false
inherits = "release"
lto = "fat"

[profile.profiling]
debug = true
inherits = "release"

[workspace.dependencies]
cainome = { version = "0.8.0", features = [ "abigen-rs" ] }
cainome-cairo-serde = { version = "0.2.1" }
dojo-utils = { git = "https://github.com/dojoengine/dojo", tag = "v1.2.2" }

# katana
katana-chain-spec = { path = "crates/chain-spec" }
katana-cli = { path = "crates/cli" }
katana-codecs = { path = "crates/storage/codecs" }
katana-codecs-derive = { path = "crates/storage/codecs/derive" }
katana-core = { path = "crates/core" }
katana-db = { path = "crates/storage/db" }
katana-executor = { path = "crates/executor" }
katana-feeder-gateway = { path = "crates/feeder-gateway" }
katana-fork = { path = "crates/storage/fork" }
katana-gas-oracle = { path = "crates/oracle/gas" }
katana-log = { path = "crates/log" }
katana-messaging = { path = "crates/messaging" }
katana-metrics = { path = "crates/metrics" }
katana-node = { path = "crates/node" }
katana-node-bindings = { path = "crates/node-bindings" }
katana-pipeline = { path = "crates/sync/pipeline" }
katana-pool = { path = "crates/pool" }
katana-primitives = { path = "crates/primitives" }
katana-provider = { path = "crates/storage/provider" }
katana-rpc = { path = "crates/rpc/rpc" }
katana-rpc-api = { path = "crates/rpc/rpc-api" }
katana-rpc-types = { path = "crates/rpc/rpc-types" }
katana-rpc-types-builder = { path = "crates/rpc/rpc-types-builder" }
katana-runner = { path = "crates/runner" }
katana-slot-controller = { path = "crates/controller" }
katana-stage = { path = "crates/sync/stage" }
katana-tasks = { path = "crates/tasks" }
katana-trie = { path = "crates/trie" }
katana-utils = { path = "crates/utils" }

# cairo
backon = { version = "1.5", features = [ "tokio-sleep" ] }
cairo-lang-casm = "2.11.2"
cairo-lang-runner = "2.11.2"
cairo-lang-sierra = "2.11.2"
cairo-lang-sierra-to-casm = "2.11.2"
cairo-lang-starknet = "2.11.2"
cairo-lang-starknet-classes = "2.11.2"
cairo-lang-utils = "2.11.2"
# Some types that we used from cairo-vm implements the `Arbitrary` trait,
# only under the `test_utils` feature. So we expose through this feature.
anyhow = "1.0.89"
arbitrary = { version = "1.3.2", features = [ "derive" ] }
assert_fs = "1.1"
assert_matches = "1.5.0"
async-trait = "0.1.82"
auto_impl = "1.2.0"
base64 = "0.21.2"
bigdecimal = "0.4.1"
cairo-vm = { version = "1.0.2", features = [ "test_utils" ] }
camino = { version = "1.1.2", features = [ "serde1" ] }
chrono = { version = "0.4.24", features = [ "serde" ] }
clap = { version = "4.5.16", features = [ "derive", "env" ] }
clap-verbosity-flag = "2.0.1"
clap_complete = "4.3"
colored = "2.0.0"
console = "0.15.7"
convert_case = "0.6.0"
crypto-bigint = { version = "0.5.3", features = [ "serde" ] }
data-url = "0.3"
derive_more = "0.99.17"
flate2 = "1.0.35"
fluent-uri = "0.3"
futures = "0.3.30"
futures-util = "0.3.30"
hashlink = "0.9.1"
hex = "0.4.3"
hex-literal = "0.4.1"
image = "0.25.2"
indexmap = "2.2.5"
indoc = "1.0.7"
itertools = "0.12.1"
lazy_static = "1.4.0"
log = "0.4.21"
metrics = "0.23.0"
num-bigint = "0.4.3"
num-traits = { version = "0.2", default-features = false }
once_cell = "1.0"
parking_lot = "0.12.1"
postcard = { version = "1.0.10", features = [ "use-std" ], default-features = false }
pretty_assertions = "1.2.1"
rand = "0.8.5"
rayon = "1.8.0"
regex = "1.10.3"
reqwest = { version = "0.12.15", features = [ "json", "rustls-tls" ], default-features = false }
rpassword = "7.2.0"
rstest = "0.18.2"
rstest_reuse = "0.6.0"
salsa = "0.16.1"
scarb = { git = "https://github.com/dojoengine/scarb", rev = "22aa38f53de205af25bf73b3ffc2c5334999d480" }
scarb-metadata = { git = "https://github.com/dojoengine/scarb", rev = "22aa38f53de205af25bf73b3ffc2c5334999d480" }
scarb-ui = { git = "https://github.com/dojoengine/scarb", rev = "22aa38f53de205af25bf73b3ffc2c5334999d480" }
semver = "1.0.5"
serde = { version = "1.0", features = [ "derive" ] }
serde_json = { version = "1.0", features = [ "arbitrary_precision" ] }
serde_with = "3.11.0"
similar-asserts = "1.5.0"
smol_str = { version = "0.2.0", features = [ "serde" ] }
spinoff = "0.8.0"
sqlx = { version = "0.8.2", features = [ "chrono", "macros", "regexp", "runtime-async-std", "runtime-tokio", "sqlite", "uuid" ] }
starknet_api = { git = "https://github.com/dojoengine/sequencer", rev = "5d737b9c9" }
strum = "0.25"
strum_macros = "0.25"
tempfile = "3.9.0"
test-log = "0.2.11"
thiserror = "1.0.32"
tokio = { version = "1.39.2", features = [ "full" ] }
tokio-util = "0.7.12"
toml = "0.8"
tracing = { version = "0.1.38", features = [ "log" ], default-features = false }
tracing-log = "0.1.3"
tracing-subscriber = { version = "0.3.16", features = [ "env-filter", "json", "tracing-log" ] }
url = { version = "2.4.0", features = [ "serde" ] }
walkdir = "2.5.0"
# TODO: see if we still need the git version
ipfs-api-backend-hyper = { git = "https://github.com/ferristseng/rust-ipfs-api", rev = "af2c17f7b19ef5b9898f458d97a90055c3605633", features = [ "with-hyper-rustls", "with-send-sync" ] }
mime_guess = "2.0"
# server
bytes = "1.10"
http = "1.3"
http-body = "1.0"
hyper = "0.14.27"
jsonrpsee = { version = "0.25", default-features = false }
rustls = "0.23"
tower = "0.5"
tower-http = { version = "0.6", features = [ "trace" ] }
warp = "0.3"
# gRPC
prost = "0.12"
tonic = { version = "0.11", features = [ "gzip", "tls", "tls-roots", "tls-webpki-roots" ] }
tonic-build = "0.11"
tonic-reflection = "0.11"
tonic-web = "0.11"
# WASM-compatible gRPC deps
criterion = "0.5.1"
pprof = { version = "0.13.0", features = [ "criterion", "flamegraph" ] }
slot = { git = "https://github.com/cartridge-gg/slot", rev = "1298a30" }
tonic-web-wasm-client = "0.6.0"
wasm-prost = { version = "0.13", package = "prost" }
wasm-tonic = { version = "0.12", default-features = false, features = [ "codegen", "gzip", "prost" ], package = "tonic" }
wasm-tonic-build = { version = "0.12", default-features = false, features = [ "prost" ], package = "tonic-build" }
# alloy core
alloy-primitives = { version = "0.8", default-features = false }
alloy-sol-types = { version = "0.8", default-features = false }
# alloy
alloy-contract = { version = "0.4", default-features = false }
alloy-json-rpc = { version = "0.4", default-features = false }
alloy-network = { version = "0.4", default-features = false }
alloy-provider = { version = "0.4", default-features = false }
alloy-rpc-types-eth = { version = "0.4", default-features = false }
alloy-signer = { version = "0.4", default-features = false }
alloy-transport = { version = "0.4", default-features = false }
alloy-transport-http = { version = "0.4", default-features = false }

bitvec = "1.0.1"
starknet = "0.15.1"
starknet-crypto = "0.7.1"
starknet-types-core = { version = "0.1.8", features = [ "arbitrary", "hash" ] }
# macro
proc-macro2 = "1.0"
quote = "1.0"
syn = { version = "2.0", default-features = false }
# OpenTelemetry dependencies for trace context propagation
opentelemetry = { version = "0.30.0", features = [ "trace" ] }
opentelemetry-gcloud-trace = "0.20"
opentelemetry-http = "0.30.0"
opentelemetry-stackdriver = { version = "0.27.0", features = [ "propagator" ] }
# katana
# cairo
# Some types that we used from cairo-vm implements the `Arbitrary` trait,
# only under the `test_utils` feature. So we expose through this feature.
# TODO: see if we still need the git version
# server
# gRPC
# WASM-compatible gRPC deps
# alloy core
# alloy
# macro
blockifier = { git = "https://github.com/dojoengine/sequencer", rev = "5d737b9c9", default-features = false }

[patch.crates-io]
# NOTE: remove this patch once this PR is merged <https://github.com/starknet-io/types-rs/pull/132>
#
# This patch fixes an issue where we're unable to correctly evaluate the accurate size
# for constructing `Felt` from unstructured data (Arbitrary).
starknet-types-core = { git = "https://github.com/kariy/types-rs", rev = "0f6ae31" }
